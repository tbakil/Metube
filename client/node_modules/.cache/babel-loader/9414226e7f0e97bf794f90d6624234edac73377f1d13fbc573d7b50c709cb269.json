{"ast":null,"code":"var _jsxFileName = \"/home/bakil/Copy-FS-Youtube-Clone/client/src/pages/Home.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Card from \"../components/Card\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n`;\n_c = Container;\nconst Home = ({\n  type\n}) => {\n  _s();\n  const [videos, setvideos] = useState([]);\n  // Fetch videos when the component mounts\n  // useEffect(() => {\n  //   const fetchVideos = async () => {\n  //     const res = await axios.get(`/videos/${type}`);\n  //     setvideos(res.data)\n  //   };\n  //   fetchVideos();\n  // }, [type]);\n\n  useEffect(() => {\n    const fetchRandomVideos = async () => {\n      try {\n        // Replace with the YouTube Data API request for random videos\n        const response = await axios.get(\"https://www.googleapis.com/youtube/v3/\", {\n          params: {\n            part: \"snippet,contentDetails,statistics\",\n            type: \"video\",\n            chart: \"like\",\n            filter: \"rating\",\n            regionCode: \"US\",\n            // You can change the region code if needed\n            videoEmbeddable: true,\n            maxResults: 100,\n            // adjust the number of videos you want\n            key: \"AIzaSyBW7rKhDaOpks-OsQVY3OTqSp-MYYMi_fU\" // replace with your YouTube Data API key\n          }\n        });\n\n        // setChannel(response.data.items);\n      } catch (error) {\n        console.error(\"Error fetching random videos:\", error);\n      }\n    };\n\n    // Call the function to fetch random videos\n    fetchRandomVideos();\n  }, []); // Empty dependency array means this effect runs once on component mount\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: videos.map(video => /*#__PURE__*/_jsxDEV(Card, {\n      video: video\n    }, video._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"TKeU8KRQzVzuX8zLd389u//k9Yc=\");\n_c2 = Home;\nexport default Home;\nvar _c, _c2;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Home\");","map":{"version":3,"names":["React","useEffect","useState","styled","Card","axios","jsxDEV","_jsxDEV","Container","div","_c","Home","type","_s","videos","setvideos","fetchRandomVideos","response","get","params","part","chart","filter","regionCode","videoEmbeddable","maxResults","key","error","console","children","map","video","_id","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/home/bakil/Copy-FS-Youtube-Clone/client/src/pages/Home.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Card from \"../components/Card\";\nimport axios from \"axios\"\n\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n`;\n\nconst Home = ({ type }) => {\n  const [videos, setvideos] = useState([]);\n  // Fetch videos when the component mounts\n  // useEffect(() => {\n  //   const fetchVideos = async () => {\n  //     const res = await axios.get(`/videos/${type}`);\n  //     setvideos(res.data)\n  //   };\n  //   fetchVideos();\n  // }, [type]);\n\n  useEffect(() => {\n    const fetchRandomVideos = async () => {\n      try {\n        // Replace with the YouTube Data API request for random videos\n        const response = await axios.get(\n          \"https://www.googleapis.com/youtube/v3/\",\n          {\n            params: {\n              part: \"snippet,contentDetails,statistics\",\n              type: \"video\",\n              chart: \"like\",\n              filter: \"rating\",\n              regionCode: \"US\", // You can change the region code if needed\n              videoEmbeddable: true,\n              maxResults: 100, // adjust the number of videos you want\n              key: \"AIzaSyBW7rKhDaOpks-OsQVY3OTqSp-MYYMi_fU\", // replace with your YouTube Data API key\n            },\n          }\n        );\n\n        // setChannel(response.data.items);\n      } catch (error) {\n        console.error(\"Error fetching random videos:\", error);\n      }\n    };\n\n    // Call the function to fetch random videos\n    fetchRandomVideos();\n  }, []); // Empty dependency array means this effect runs once on component mount\n  return (\n    <Container>\n      {videos.map((video) => (\n        <Card key={video._id} video={video} />\n      ))}\n    </Container>\n  );\n};\n\nexport default Home;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,IAAI,MAAM,oBAAoB;AACrC,OAAOC,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGzB,MAAMC,SAAS,GAAGL,MAAM,CAACM,GAAI;AAC7B;AACA;AACA;AACA,CAAC;AAACC,EAAA,GAJIF,SAAS;AAMf,MAAMG,IAAI,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EACzB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACxC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEAD,SAAS,CAAC,MAAM;IACd,MAAMe,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MACpC,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAC9B,wCAAwC,EACxC;UACEC,MAAM,EAAE;YACNC,IAAI,EAAE,mCAAmC;YACzCR,IAAI,EAAE,OAAO;YACbS,KAAK,EAAE,MAAM;YACbC,MAAM,EAAE,QAAQ;YAChBC,UAAU,EAAE,IAAI;YAAE;YAClBC,eAAe,EAAE,IAAI;YACrBC,UAAU,EAAE,GAAG;YAAE;YACjBC,GAAG,EAAE,yCAAyC,CAAE;UAClD;QACF,CACF,CAAC;;QAED;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACF,CAAC;;IAED;IACAX,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;EACR,oBACET,OAAA,CAACC,SAAS;IAAAqB,QAAA,EACPf,MAAM,CAACgB,GAAG,CAAEC,KAAK,iBAChBxB,OAAA,CAACH,IAAI;MAAiB2B,KAAK,EAAEA;IAAM,GAAxBA,KAAK,CAACC,GAAG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAiB,CACtC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACO,CAAC;AAEhB,CAAC;AAACvB,EAAA,CA/CIF,IAAI;AAAA0B,GAAA,GAAJ1B,IAAI;AAiDV,eAAeA,IAAI;AAAC,IAAAD,EAAA,EAAA2B,GAAA;AAAAC,YAAA,CAAA5B,EAAA;AAAA4B,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}