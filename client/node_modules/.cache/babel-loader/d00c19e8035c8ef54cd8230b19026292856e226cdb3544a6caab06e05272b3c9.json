{"ast":null,"code":"var _jsxFileName = \"/home/bakil/Copy-FS-Youtube-Clone/client/src/components/Recommendation.jsx\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Card from \"./Card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  flex: 2;\n`;\n_c = Container;\nconst Recommendation = ({\n  tags\n}) => {\n  _s();\n  const [videos, setVideos] = useState([]);\n\n  // useEffect(() => {\n  //   const fetchVideos = async () => {\n  //     const res = await axios.get(`/videos/tags?tags=${tags}`);\n  //     setVideos(res.data);\n  //   };\n  //   fetchVideos();\n  // }, [tags]);\n\n  useEffect(() => {\n    const fetchRandomVideos = async () => {\n      try {\n        // Replace with the YouTube Data API request for random videos\n        const res = await axios.get(\"https://www.googleapis.com/youtube/v3/\", {\n          params: {\n            part: \"snippet,contentDetails,statistics\",\n            type: \"video\",\n            myRating: \"like\",\n            regionCode: \"US\",\n            // You can change the region code if needed\n            videoEmbeddable: true,\n            maxResults: 100,\n            // adjust the number of videos you want\n            key: \"AIzaSyBW7rKhDaOpks-OsQVY3OTqSp-MYYMi_fU\" // replace with your YouTube Data API key\n          }\n        });\n        setVideos(res.data);\n        // setChannel(response.data.items);\n      } catch (error) {\n        console.error(\"Error fetching random videos:\", error);\n      }\n    };\n\n    // Call the function to fetch random videos\n    fetchRandomVideos();\n  }, []); // Empty dependency array means this effect runs once on component mount\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: videos.map(video => /*#__PURE__*/_jsxDEV(Card, {\n      type: \"sm\",\n      video: video\n    }, video._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(Recommendation, \"39g9r2hk3cJXA16k+db4Z3Rqykw=\");\n_c2 = Recommendation;\nexport default Recommendation;\nvar _c, _c2;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Recommendation\");","map":{"version":3,"names":["axios","React","useEffect","useState","styled","Card","jsxDEV","_jsxDEV","Container","div","_c","Recommendation","tags","_s","videos","setVideos","fetchRandomVideos","res","get","params","part","type","myRating","regionCode","videoEmbeddable","maxResults","key","data","error","console","children","map","video","_id","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/home/bakil/Copy-FS-Youtube-Clone/client/src/components/Recommendation.jsx"],"sourcesContent":["import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Card from \"./Card\";\n\nconst Container = styled.div`\n  flex: 2;\n`;\n\nconst Recommendation = ({ tags }) => {\n  const [videos, setVideos] = useState([]);\n\n  // useEffect(() => {\n  //   const fetchVideos = async () => {\n  //     const res = await axios.get(`/videos/tags?tags=${tags}`);\n  //     setVideos(res.data);\n  //   };\n  //   fetchVideos();\n  // }, [tags]);\n\n  useEffect(() => {\n    const fetchRandomVideos = async () => {\n      try {\n        // Replace with the YouTube Data API request for random videos\n        const res = await axios.get(\n          \"https://www.googleapis.com/youtube/v3/\",\n          {\n            params: {\n              part: \"snippet,contentDetails,statistics\",\n              type: \"video\",\n              myRating: \"like\",\n              regionCode: \"US\", // You can change the region code if needed\n              videoEmbeddable: true,\n              maxResults: 100, // adjust the number of videos you want\n              key: \"AIzaSyBW7rKhDaOpks-OsQVY3OTqSp-MYYMi_fU\", // replace with your YouTube Data API key\n            },\n          }\n        );\nsetVideos(res.data);\n        // setChannel(response.data.items);\n      } catch (error) {\n        console.error(\"Error fetching random videos:\", error);\n      }\n    };\n\n    // Call the function to fetch random videos\n    fetchRandomVideos();\n  }, []); // Empty dependency array means this effect runs once on component mount\n\n  return (\n    <Container>\n      {videos.map((video) => (\n        <Card type=\"sm\" key={video._id} video={video} />\n      ))}\n    </Container>\n  );\n};\n\nexport default Recommendation;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,SAAS,GAAGJ,MAAM,CAACK,GAAI;AAC7B;AACA,CAAC;AAACC,EAAA,GAFIF,SAAS;AAIf,MAAMG,cAAc,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EACnC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;;EAExC;EACA;EACA;EACA;EACA;EACA;EACA;;EAEAD,SAAS,CAAC,MAAM;IACd,MAAMc,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MACpC,IAAI;QACF;QACA,MAAMC,GAAG,GAAG,MAAMjB,KAAK,CAACkB,GAAG,CACzB,wCAAwC,EACxC;UACEC,MAAM,EAAE;YACNC,IAAI,EAAE,mCAAmC;YACzCC,IAAI,EAAE,OAAO;YACbC,QAAQ,EAAE,MAAM;YAChBC,UAAU,EAAE,IAAI;YAAE;YAClBC,eAAe,EAAE,IAAI;YACrBC,UAAU,EAAE,GAAG;YAAE;YACjBC,GAAG,EAAE,yCAAyC,CAAE;UAClD;QACF,CACF,CAAC;QACTX,SAAS,CAACE,GAAG,CAACU,IAAI,CAAC;QACX;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACF,CAAC;;IAED;IACAZ,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACET,OAAA,CAACC,SAAS;IAAAsB,QAAA,EACPhB,MAAM,CAACiB,GAAG,CAAEC,KAAK,iBAChBzB,OAAA,CAACF,IAAI;MAACgB,IAAI,EAAC,IAAI;MAAiBW,KAAK,EAAEA;IAAM,GAAxBA,KAAK,CAACC,GAAG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAiB,CAChD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACO,CAAC;AAEhB,CAAC;AAACxB,EAAA,CA/CIF,cAAc;AAAA2B,GAAA,GAAd3B,cAAc;AAiDpB,eAAeA,cAAc;AAAC,IAAAD,EAAA,EAAA4B,GAAA;AAAAC,YAAA,CAAA7B,EAAA;AAAA6B,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}