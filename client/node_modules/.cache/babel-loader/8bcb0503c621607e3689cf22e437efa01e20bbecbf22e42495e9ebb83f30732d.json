{"ast":null,"code":"var _jsxFileName = \"/home/bakil/Copy-FS-Youtube-Clone/client/src/pages/Search.jsx\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport Card from \"../components/Card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n`;\n_c = Container;\nconst Search = () => {\n  _s();\n  const [videos, setVideos] = useState([]);\n  // const query = useLocation().search;\n  //added\n  const apiKey = \"AIzaSyBW7rKhDaOpks-OsQVY3OTqSp-MYYMi_fU\";\n  useEffect(() => {\n    const fetchRandomVideos = async () => {\n      try {\n        const res = await axios.get(\"https://www.googleapis.com/youtube/v3/videos\", {\n          params: {\n            part: \"snippet,contentDetails,statistics\",\n            chart: \"mostPopular\",\n            filter: \"rating\",\n            order: \"date\",\n            regionCode: \"US\",\n            // You can change the region code if needed\n            videoEmbeddable: true,\n            maxResults: 100,\n            // adjust the number of videos you want\n            key: apiKey // replace with your YouTube Data API key\n          }\n        });\n        setVideos(res.data.items);\n      } catch (error) {\n        console.error(\"Error fetching random videos:\", error);\n      }\n    };\n\n    // Call the function to fetch random videos\n    fetchRandomVideos();\n  }, []); // Empty dependency array means this effect runs once on component mount\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: videos && videos.map(video => /*#__PURE__*/_jsxDEV(Card, {\n      video: video\n    }, video._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 41\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(Search, \"39g9r2hk3cJXA16k+db4Z3Rqykw=\");\n_c2 = Search;\nexport default Search;\nvar _c, _c2;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Search\");","map":{"version":3,"names":["axios","React","useEffect","useState","useLocation","styled","Card","jsxDEV","_jsxDEV","Container","div","_c","Search","_s","videos","setVideos","apiKey","fetchRandomVideos","res","get","params","part","chart","filter","order","regionCode","videoEmbeddable","maxResults","key","data","items","error","console","children","map","video","_id","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/home/bakil/Copy-FS-Youtube-Clone/client/src/pages/Search.jsx"],"sourcesContent":["import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport Card from \"../components/Card\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n`;\n\nconst Search = () => {\n  const [videos, setVideos] = useState([]);\n  // const query = useLocation().search;\n  //added\n  const apiKey = \"AIzaSyBW7rKhDaOpks-OsQVY3OTqSp-MYYMi_fU\";\n  \n  useEffect(() => {\n    \n    const fetchRandomVideos = async () => {\n     try {\n       const res = await axios.get(\n         \"https://www.googleapis.com/youtube/v3/videos\",\n         {\n           params: {\n             part: \"snippet,contentDetails,statistics\",\n             chart: \"mostPopular\",\n             filter: \"rating\",\n             order: \"date\",\n             regionCode: \"US\", // You can change the region code if needed\n             videoEmbeddable: true,\n             maxResults: 100, // adjust the number of videos you want\n             key: apiKey, // replace with your YouTube Data API key\n           },\n         }\n       );\n       setVideos(res.data.items);\n     } catch (error) {\n       console.error(\"Error fetching random videos:\", error);\n     }\n    };\n\n    // Call the function to fetch random videos\n    fetchRandomVideos();\n  }, []); // Empty dependency array means this effect runs once on component mount\n\n  return (\n    <Container>\n      {videos && videos.map((video) => (<Card key={video._id} video={video} />))}\n    </Container>\n  );\n};\n\nexport default Search;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,IAAI,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,SAAS,GAAGJ,MAAM,CAACK,GAAI;AAC7B;AACA;AACA;AACA,CAAC;AAACC,EAAA,GAJIF,SAAS;AAMf,MAAMG,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACxC;EACA;EACA,MAAMa,MAAM,GAAG,yCAAyC;EAExDd,SAAS,CAAC,MAAM;IAEd,MAAMe,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MACrC,IAAI;QACF,MAAMC,GAAG,GAAG,MAAMlB,KAAK,CAACmB,GAAG,CACzB,8CAA8C,EAC9C;UACEC,MAAM,EAAE;YACNC,IAAI,EAAE,mCAAmC;YACzCC,KAAK,EAAE,aAAa;YACpBC,MAAM,EAAE,QAAQ;YAChBC,KAAK,EAAE,MAAM;YACbC,UAAU,EAAE,IAAI;YAAE;YAClBC,eAAe,EAAE,IAAI;YACrBC,UAAU,EAAE,GAAG;YAAE;YACjBC,GAAG,EAAEZ,MAAM,CAAE;UACf;QACF,CACF,CAAC;QACDD,SAAS,CAACG,GAAG,CAACW,IAAI,CAACC,KAAK,CAAC;MAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACD,CAAC;;IAED;IACAd,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACET,OAAA,CAACC,SAAS;IAAAwB,QAAA,EACPnB,MAAM,IAAIA,MAAM,CAACoB,GAAG,CAAEC,KAAK,iBAAM3B,OAAA,CAACF,IAAI;MAAiB6B,KAAK,EAAEA;IAAM,GAAxBA,KAAK,CAACC,GAAG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAiB,CAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjE,CAAC;AAEhB,CAAC;AAAC3B,EAAA,CAxCID,MAAM;AAAA6B,GAAA,GAAN7B,MAAM;AA0CZ,eAAeA,MAAM;AAAC,IAAAD,EAAA,EAAA8B,GAAA;AAAAC,YAAA,CAAA/B,EAAA;AAAA+B,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}